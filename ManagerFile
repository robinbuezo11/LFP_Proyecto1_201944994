from tkinter import messagebox as msgbx

class ManagerFile:
    def __init__(self) -> None:
        self.__data = []

    #----------------------- Functions ----------------------------
    def openFile(self,ruta):   #Metodo para leer el archivo
        f = None
        data = None
        try:
            f = open(ruta,'r', encoding='utf-8')
            file = f.readlines()

            data = self.__readFile(file)
            self.__data = data
            if data is not None:
                msgbx.showinfo('Archivo Cargado','El archivo se cargó exitosamente')
        except Exception as ex:
            msgbx.showerror("ERROR",'Error en la carga, revise que los datos y la ruta de su archivo sean correctos.')
        finally:
            if f is not None:
                f.close()
            return data

    def __readFile(self, file):
        '''iterator = 0
        for line in file:
            file[iterator] = line.split(',')
            if len(file[iterator]) != 7:
                msgbx.showerror('Error',f'El archivo no contiene la cantidad de datos correcta en la linea: {line}')
                return
            
            if file[iterator][6][len(file[iterator][6])-1:len(file[iterator][6])] == '\n':
                file[iterator][6] = file[iterator][6][:len(file[iterator][6])-1]

            try:
                for char in file[iterator][0]:
                    int(char)

                file[iterator][3] = int(file[iterator][3])
                if file[iterator][3] not in (1,0):
                    msgbx.showerror('Error', 'El campo obligatorio debe ser\n 0 -> Opcional\n1 -> Obligatorio')
                    return

                file[iterator][4] = int(file[iterator][4])
                if file[iterator][4]>10 or file[iterator][4]<1:
                    msgbx.showerror('Error', 'El campo semestre debe ser un entero entre 1 y 10')
                    return

                file[iterator][5] = int(file[iterator][5])

                file[iterator][6] = int(file[iterator][6])
                if file[iterator][6] not in (1,0,-1):
                    msgbx.showerror('Error', 'El campo Estado debe ser\n 0 -> Aprobado\n1 -> Cursando\n-1 -> Pendiente')
                    return
            except Exception as e:
                msgbx.showerror('Error', "Los valores de Código, Obligatorio, Semestre, Créditos y Estado deben ser números enteros")
                return
            iterator += 1

        data = []
        
        for addline in file:
            course = Course(addline[0], addline[1], addline[2], addline[3], addline[4], addline[5], addline[6])
            end = False
            iter=0
            while not end:
                if len(data) == 0:
                    data.append(course)
                    end = True
                else:
                    while iter<len(data) and not end:
                        if data[iter].getCode() == course.getCode()    :
                            data.pop(iter)
                            data.append(course)
                            end = True
                        else:
                           iter+=1
                            
                    if not end:
                        data.append(course)
                        end = True
        return data'''
        return file

    def getData(self):
        return self.__data

    def setData(self, data):
        self.__data = data

